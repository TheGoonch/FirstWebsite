+CSS-------------------------------------------------------------------------
- Basic syntax
    ex:
    selector
        ^
    div.bold-text{
        font-weight: 700;
    }       ^          ^
        Property      value

-selectors refer to html elements that css applies to
universal selector is *{}

-class selector, classes can be given to html texts and they can be used by css
it can also have multiple classes seperated by white space
    ex:
    <div class="alert-text">Please agree to our terms of service.</div>
    .alert-text {
        color: red;
    }
    -- white space is used to differentiate between classes so use - instead

-ID selector, html elements can only have one ID and so there's a different selector for it
    ex:<div id="title">My Awesome 90's Page</div>
    #title {
        background-color: red;
    }
    --IDs should be used sparingly

- can have multiple selectors seperated by coma, but you can still declare them
uniquely with their own different properties almost like their inheritance in java

-chaining selectors, when we have multiple classes and we want to change a specific one
we do .subsection.header, so only the element with both classes get changed, also
works with ids, .subsection#preview
    ex: 
    <div>
        <div class="subsection header">Latest Posts</div>
        <p class="subsection preview">This is where a preview for a post might go.</p>
        <p class="subsection" id="preview"> hey </d>
    </div>

    .subsection.header {
        color: red;
    }

    .subsection#preview {
        color: blue;
    }

-descendant combinator, when doing a selector and you have something like ancestor and inside is contents
and then inside that is contents again, and you have a seperate contents in the bottom
only the nested contents would be seperated

    ex:
    .subsection .contents {
        color: blue;
    }
    --white space between them is what makes it a combinator

*basic properties
- color - hex, rgb, and hsl values
- background-color hex, rgb, and hsl values
    ex:
    p {
         color: #1100ff;
    }

    p {
        color: rgb(100, 0, 127);
    }

- font-family, if white space use "" else nothing, font-family: "Times New Roman", serif;
- font-size, font-size: 22px
- font-weight affects boldness,font-weight: 700 or use bold
- text-align, text-align: center
- img, height:, width:, if height is auto it's going to be half of width

*connecting html and css
- external css
    ex:
    <head>
        <link rel="stylesheet" href="styles.css">
    </head>

- internal css
    ex:
    <head>
        <style>
            div {
            color: white;
            background-color: black;
            }

            p {
            color: red;
            }
        </style>
    </head>

- inline css
    ex:
    <body>
        <div style="color: white; background-color: black;">...</div>
    </body>

+Cascade------------------------------------------------------------------

*specificity
- Id > More specific > less specific > type selector
- if it's a tie between 2 ids one with a class or another selector would win 
- combinators don't add to specificity

*inheritance
- If you have a rule that encompases text for example then you have a More
specific selector, list for example, if text changes font and you don't set it
in list it'll inheret that property.
- Not every element can be inhereted, most commonly are typography based opens

*Rule order 
- If everything is equal then the rule that's the most recently declared
takes precedence

+Inspecting HTML and CSS-------------------------------------------------------
-Use F12 to inspect element
*inspecting elements
- You can hover over them in F12 menu to check them
- You can also edit on style sheet on botton to check out how they look
and then refresh to get rid of them

+Box Model-------------------------------------------------------------------------------
- Everything in CSS is a Box
- Padding = space between border of a box and the content of the box
- Border = space between padding and margin
- margin = the space between the borders of adjacent boxes
    --> The bigger margin takes precedence, if box 1 is 20 ptx away from box 2
        and box 2 is 21 ptx away from box 1 then both of them are going to be
        21 ptx away from eachother

+Block and Inline----------------------------------------------------------------
* difference
- default style of elements are blocks, "display: block", each new element will appear
in a new block, like boxes stacking on top of each other
- Inlines appear beside elements, ex: "<a>" is a link tag
    --> works diffently with padding than boxes

*Inline-Block, inline elements but with block style padding and margin
* div and spans, are elements that are used for just dividing elements
"<div></div>"
- spans are more for inline-level elements, used to group text content and inline
HTML elements for styling, use only when no other semantic HTML elem is appropriate
<span> class highlight>highlight me</span>